datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["services", "resources"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "multiSchema"]
}

generator akasha_generator {
  provider = "akasha-prisma-generator"
  output   = "../src/_common/generated/types.ts"
}

enum Role {
  USER
  MANAGER
  ADMINISTRATOR

  @@map("role")
  @@schema("services")
}

enum RegistrationState {
  REGISTERING
  REGISTERED
  UNREGISTERING
  UNREGISTERED

  @@map("registration_state")
  @@schema("services")
}

enum ActiveStatus {
  OFFLINE
  ONLINE
  IDLE
  DO_NOT_DISTURB
  INVISIBLE
  MATCHING
  GAME

  @@map("active_status")
  @@schema("services")
}

enum BanCategory {
  ACCESS
  COMMIT

  @@map("ban_category")
  @@schema("services")
}

enum MessageType {
  REGULAR
  NOTICE

  @@map("message_type")
  @@schema("services")
}

model Account {
  id                    String            @id @default(uuid()) @db.Uuid
  // Authentication
  authIssuer            Int
  authSubject           String            @db.VarChar(256)
  otpSecret             Secret?           @relation(fields: [otpSecretKey], references: [id], onDelete: Restrict)
  otpSecretKey          Int?
  // Register
  createdTimestamp      DateTime          @default(now())
  changedTimestamp      DateTime          @default(now())
  registrationState     RegistrationState @default(REGISTERING)
  // Profile
  nickName              String?
  nickTag               Int               @default(0)
  avatar                Avatar?           @relation(fields: [avatarKey], references: [id], onDelete: SetDefault)
  avatarKey             String?           @db.VarChar(21)
  role                  Role              @default(USER)
  record                Record?
  // Status
  activeStatus          ActiveStatus      @default(OFFLINE)
  activeTimestamp       DateTime          @default(now())
  statusMessage         String            @default("")
  sessions              Session[]
  // Social
  friends               Friend[]          @relation("FriendList")
  friendReferences      Friend[]          @relation("FriendReference")
  enemies               Enemy[]           @relation("EnemyList")
  enemyReferences       Enemy[]           @relation("EnemyReference")
  bans                  Ban[]             @relation("BanList")
  managedBanTargets     Ban[]             @relation("ManagedBanTarget")
  // Chat
  chatRooms             ChatMember[]
  chatMessages          ChatMessage[]
  chatBans              ChatBan[]         @relation("ChatBanList")
  managedChatBanTargets ChatBan[]         @relation("ManagedChatBanTarget")
  sentChatDirects       ChatDirect[]      @relation("SentChatDirects")
  receivedChatDirects   ChatDirect[]      @relation("ReceivedChatDirects")
  // Game
  gameQueue             GameQueue?
  gameMember            GameMember?
  gameHistory           GameHistory[]

  @@unique([authIssuer, authSubject])
  @@unique([nickName, nickTag])
  @@index(nickName)
  @@map("accounts")
  @@schema("services")
}

model Authorization {
  id               String   @id @default(nanoid()) @db.VarChar(21)
  endpointKey      String
  redirectURI      String
  createdTimestamp DateTime @default(now())

  @@map("authorizations")
  @@schema("services")
}

model Session {
  id               BigInt   @id @default(autoincrement())
  account          Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        String   @db.Uuid
  token            String   @unique @default(nanoid(128)) @db.VarChar(128)
  createdTimestamp DateTime @default(now())
  successor        Session? @relation("SessionHistory")
  predecessor      Session? @relation("SessionHistory", fields: [predecessorId], references: [id], onDelete: SetNull)
  predecessorId    BigInt?  @unique
  isValid          Boolean  @default(true)

  @@map("sessions")
  @@schema("services")
}

model Secret {
  id                Int       @id @default(autoincrement())
  data              Bytes
  params            Json
  createdTimestamp  DateTime  @default(now())
  updatedTimestamp  DateTime  @updatedAt
  accountReferences Account[]

  @@map("secrets")
  @@schema("services")
}

model Avatar {
  id                String    @id @default(nanoid()) @db.VarChar(21)
  data              Bytes
  createdTimestamp  DateTime  @default(now())
  updatedTimestamp  DateTime  @updatedAt
  accountReferences Account[]

  @@map("avatars")
  @@schema("services")
}

model Record {
  account         Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       String        @id @db.Uuid
  achievements    Achievement[]
  skillRating     Int           @default(0)
  experiencePoint BigInt        @default(0)
  winCount        Int           @default(0)
  loseCount       Int           @default(0)
  tieCount        Int           @default(0)
  gameStatistics  Json          @default("{}")

  @@index([skillRating(sort: Asc)])
  @@index([gameStatistics(ops: JsonbOps)], type: Gin)
  @@map("records")
  @@schema("services")
}

model Achievement {
  record             Record   @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  accountId          String   @db.Uuid
  achievementId      Int
  completedTimestamp DateTime @default(now())

  @@id([accountId, achievementId])
  @@map("achievements")
  @@schema("services")
}

model Friend {
  account         Account @relation("FriendList", fields: [accountId], references: [id], onDelete: Cascade)
  accountId       String  @db.Uuid
  friendAccount   Account @relation("FriendReference", fields: [friendAccountId], references: [id], onDelete: Cascade)
  friendAccountId String  @db.Uuid
  groupName       String
  activeFlags     String  @db.Bit(8)

  @@id([accountId, friendAccountId])
  @@map("friends")
  @@schema("services")
}

model Enemy {
  account        Account @relation("EnemyList", fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String  @db.Uuid
  enemyAccount   Account @relation("EnemyReference", fields: [enemyAccountId], references: [id], onDelete: Cascade)
  enemyAccountId String  @db.Uuid
  memo           String

  @@id([accountId, enemyAccountId])
  @@map("enemies")
  @@schema("services")
}

model Ban {
  id               String      @id @default(nanoid()) @db.VarChar(21)
  account          Account     @relation("BanList", fields: [accountId], references: [id], onDelete: Cascade)
  accountId        String      @db.Uuid
  managerAccount   Account     @relation("ManagedBanTarget", fields: [managerAccountId], references: [id], onDelete: Cascade)
  managerAccountId String      @db.Uuid
  category         BanCategory
  reason           String
  memo             String
  expireTimestamp  DateTime?
  bannedTimestamp  DateTime    @default(now())

  @@map("bans")
  @@schema("services")
}

model Chat {
  id        String        @id @default(uuid()) @db.Uuid
  title     String
  isPrivate Boolean
  isSecret  Boolean
  password  String
  limit     Int
  members   ChatMember[]
  messages  ChatMessage[]
  bans      ChatBan[]

  @@map("chats")
  @@schema("services")
}

model ChatMember {
  chat          Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId        String       @db.Uuid
  account       Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     String       @db.Uuid
  role          Role
  lastMessage   ChatMessage? @relation(fields: [lastMessageId], references: [id], onDelete: Cascade)
  lastMessageId String?      @db.Uuid

  @@id([chatId, accountId])
  @@map("chat_members")
  @@schema("services")
}

model ChatMessage {
  id             String       @id @default(uuid()) @db.Uuid
  chat           Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId         String       @db.Uuid
  account        Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String       @db.Uuid
  content        String
  messageType    MessageType
  timestamp      DateTime     @default(now())
  reachedMembers ChatMember[]

  @@index([timestamp(ops: TimestampMinMaxOps)], type: Brin)
  @@map("chat_messages")
  @@schema("services")
}

model ChatBan {
  id               String      @id @default(nanoid()) @db.VarChar(21)
  chat             Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId           String      @db.Uuid
  account          Account     @relation("ChatBanList", fields: [accountId], references: [id], onDelete: Cascade)
  accountId        String      @db.Uuid
  managerAccount   Account     @relation("ManagedChatBanTarget", fields: [managerAccountId], references: [id], onDelete: Cascade)
  managerAccountId String      @db.Uuid
  category         BanCategory
  reason           String
  memo             String
  expireTimestamp  DateTime?
  bannedTimestamp  DateTime    @default(now())

  @@map("chat_bans")
  @@schema("services")
}

model ChatDirect {
  id                   String   @id @default(uuid()) @db.Uuid
  sourceAccount        Account  @relation("SentChatDirects", fields: [sourceAccountId], references: [id], onDelete: Cascade)
  sourceAccountId      String   @db.Uuid
  destinationAccount   Account  @relation("ReceivedChatDirects", fields: [destinationAccountId], references: [id], onDelete: Cascade)
  destinationAccountId String   @db.Uuid
  content              String
  timestamp            DateTime @default(now())

  @@index([sourceAccountId, destinationAccountId])
  @@index([timestamp(ops: TimestampMinMaxOps)], type: Brin)
  @@map("chat_directs")
  @@schema("services")
}

model Game {
  id          String       @id @default(uuid()) @db.Uuid
  code        String       @unique @default(nanoid(2)) @db.VarChar(2)
  title       String
  modeFlags   String       @db.Bit(16)
  password    String
  battlefield Int
  timestamp   DateTime     @default(now())
  statistic   Json         @default("{}")
  members     GameMember[]

  @@map("games")
  @@schema("services")
}

model GameMember {
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String  @db.Uuid
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique @db.Uuid
  modeFlags String  @db.Bit(16)
  statistic Json    @default("{}")

  @@id([gameId, accountId])
  @@map("game_members")
  @@schema("services")
}

model GameQueue {
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String   @unique @db.Uuid
  skillRating Int
  timestamp   DateTime @default(now())

  @@index([skillRating])
  @@index([timestamp])
  @@map("game_queue")
  @@schema("services")
}

model GameHistory {
  id               String    @id @db.Uuid
  modeFlags        String    @db.Bit(16)
  battlefield      Int
  timestamp        DateTime
  statistic        Json      @default("{}")
  members          Account[]
  memberStatistics Json      @default("[]")

  @@index([timestamp(ops: TimestampMinMaxOps)], type: Brin)
  @@index([statistic(ops: JsonbOps)], type: Gin)
  @@index([memberStatistics(ops: JsonbOps)], type: Gin)
  @@map("game_history")
  @@schema("services")
}
